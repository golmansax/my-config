# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


##################################
# START OF MY CODE
##################################

# Check for ssh-add, and run it if nothing is running
if [[ `ssh-add -l` != *id_?sa* ]]; then
  ssh-add -t 5h  ## 5 hour ssh-agent expiration
fi

PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
alias ls='ls --color=auto'
#alias dir='dir --color=auto'
#alias vdir='vdir --color=auto'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

export EDITOR=vim
export BUNDLER_EDITOR="$EDITOR"

# Below are things custom to my src dir
SRC="$HOME/src"

# Python virtualenvwrapper
if [ -a /usr/local/bin/virtualenvwrapper.sh ]; then
  # Python bin located differently on Mac vs Linux
  if [ -f /usr/local/bin/python3 ]; then
    VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
  else
    VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
  fi

  export WORKON_HOME=~/.virtualenvs
  source /usr/local/bin/virtualenvwrapper.sh

  # ***** virtualenv-cd *****
  function check-for-virtualenv {
    git rev-parse --show-toplevel &> /dev/null

    if [ $? == 0 ]; then
      local ENV_NAME=`basename \`git rev-parse --show-toplevel\``

      if [ ! -e $WORKON_HOME/$ENV_NAME/bin/activate ]; then
        ENV_NAME=`basename \`pwd\``
      fi

      if [ "${VIRTUAL_ENV##*/}" != $ENV_NAME ] && [ -e $WORKON_HOME/$ENV_NAME/bin/activate ]; then
        workon $ENV_NAME && export CD_VIRTUAL_ENV=$ENV_NAME
      fi
    elif [ $CD_VIRTUAL_ENV ]; then
      deactivate && unset CD_VIRTUAL_ENV
    fi
  }

  function cd() {
    builtin cd "$@" && check-for-virtualenv
  }

  check-for-virtualenv
fi
# ***** end virtualenv-cd *****


# Going to root directory of current git repo or a default git directory
GIT_DIR_COMMAND='git rev-parse --show-toplevel'
alias cd-git="$GIT_DIR_COMMAND && cd \`$GIT_DIR_COMMAND\`"

_cd-file_command() {
  DIR=`dirname $1`
  [ "$DIR" ] && cd $DIR
}
alias cd-file=_cd-file_command

# Bash complete going into any src directory
_cd-src_command() {
  if [[ $# -lt 1 ]]; then
    cd $SRC
  else
    cd $SRC/$1
  fi
}
alias cd-src=_cd-src_command

_cd-src_complete() {
  COMPREPLY=($(compgen -W "$(ls $SRC)" -- ${COMP_WORDS[COMP_CWORD]}))
}
complete -F _cd-src_complete cd-src

# Used for files local to this machine
LOCAL="$SRC/local"

# Source local .bashrc if it exists
[[ -a "$LOCAL/.bashrc" ]] && source "$LOCAL/.bashrc"

export GOPATH=$HOME/golang
export GOROOT=/usr/local/opt/go/libexec

# For different bin paths
BINS=(
  $SRC/my-config/bin
  $LOCAL/bin
  $HOME/.arc/arcanist/bin
  $SRC/synchroform/bin
  /usr/local/heroku/bin
  $GOPATH/bin
  $GOROOT/bin
  $HOME/.rvm/bin
)
for i in ${!BINS[*]}; do
  BIN=${BINS[$i]}
  [[ -d $BIN ]] && export PATH="$BIN:$PATH"
done

# Configure OPAM (OCaml package manager)
[[ -d "$HOME/.opam" ]] && eval `opam config env`

# added by travis gem
[ -f /home/holman/.travis/travis.sh ] && source /home/holman/.travis/travis.sh

export NVM_DIR=~/.nvm

if (hash brew); then
  echo 'Installing Mac config...'

  # On a Mac
  if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
  fi

  source /usr/local/opt/nvm/nvm.sh

  export ANDROID_HOME=/usr/local/share/android-sdk

  parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  }
  export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "
else
  echo 'Installing Linux config...'

  if [ -f /usr/share/bash-completion/completions/git ]; then
    . /usr/share/bash-completion/completions/git
  fi
fi

if [ -f ~/.nvm/nvm.sh ]; then
  source ~/.nvm/nvm.sh
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/holman/apps/google-cloud-sdk/path.bash.inc' ]; then source '/Users/holman/apps/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/holman/apps/google-cloud-sdk/completion.bash.inc' ]; then source '/Users/holman/apps/google-cloud-sdk/completion.bash.inc'; fi

# Annoying RVM is a diva and wants to be last
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Set up Docker machine if needed
# eval $(docker-machine env default)

echo "bashrc loaded!"
